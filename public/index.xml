<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@uyorumの雑記帳</title>
    <link>https://blog.uyorum.net/</link>
    <description>Recent content on @uyorumの雑記帳</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>uyorum All Right Reserved.</copyright>
    <lastBuildDate>Sat, 14 Oct 2023 10:45:31 +0900</lastBuildDate><atom:link href="https://blog.uyorum.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lenovo Go USB Type-C ワイヤレス マルチデバイスマウスを買った</title>
      <link>https://blog.uyorum.net/post/lenovo-wireless-multi-device-mouse/</link>
      <pubDate>Sat, 14 Oct 2023 10:45:31 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/lenovo-wireless-multi-device-mouse/</guid>
      <description>&lt;p&gt;手軽に持ち運べるマウスということで買ってみたが結構良かった。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EPGStationでときどきエンコードに失敗する</title>
      <link>https://blog.uyorum.net/post/epgstation-fail-to-encode/</link>
      <pubDate>Sat, 30 Sep 2023 21:58:49 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/epgstation-fail-to-encode/</guid>
      <description>&lt;p&gt;EPGStationで録画した番組は自動でmp4にエンコードするようにしています。
しかしいくつかの番組でmp4のファイルサイズが0バイトになっておりエンコードに失敗しているようです。
しかも既存のスクリプトではこの状況をエンコード失敗として検知できないらしく、エンコードが完了したとしてソースのtsファイルを削除してしまうのでリカバリできず痛手となっていました。&lt;/p&gt;
&lt;p&gt;ひとまずはエンコード完了後のtsファイル削除をしない設定にしていましたがきちんと対処します。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RaspberryPi上のEPGStationコンテナ用にffmpegをビルドする（2023年9月版）</title>
      <link>https://blog.uyorum.net/post/raspberrypi-build-ffmpeg-2023/</link>
      <pubDate>Sun, 24 Sep 2023 00:34:11 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/raspberrypi-build-ffmpeg-2023/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../raspberrypi-mirakurun-epgstation/&#34;&gt;以前&lt;/a&gt;、RaspberryPi上にEPGStationをDockerを使ってセットアップしました。
この中でRaspberryPiのハードウェアエンコードが有効なffmpegをビルドしたのですが、
今回軽い気持ちでEPGStationコンテナを最新化しようとしたところこのffmpegのビルドがエラー連発で大苦戦してしまいました。
Dockerfileは変えていなかったので外部の要因によるもののようです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EPGStationの録画データをNASへ自動で同期する</title>
      <link>https://blog.uyorum.net/post/sync-epgstation-to-nas/</link>
      <pubDate>Sat, 23 Sep 2023 23:22:31 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/sync-epgstation-to-nas/</guid>
      <description>&lt;p&gt;EPGStation上に置いたままだと何かと取り回しづらいのでNASへ同期するようにしました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ロール式ベビーゲートの修理</title>
      <link>https://blog.uyorum.net/post/repair-roll-type-baby-gate/</link>
      <pubDate>Mon, 18 Sep 2023 03:26:16 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/repair-roll-type-baby-gate/</guid>
      <description>&lt;p&gt;スムーズに巻き取りされなくなったので修理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SteamDeckのSSD換装とWindowsインストールしてディスク共有化まで</title>
      <link>https://blog.uyorum.net/post/steamdeck-upgrade-ssd-and-install-windows/</link>
      <pubDate>Sun, 27 Aug 2023 02:35:50 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/steamdeck-upgrade-ssd-and-install-windows/</guid>
      <description>&lt;p&gt;AliexpressのセールでM.2 SSDがめちゃくちゃ安かったのでSteamDeckのSSDを換装してやります。&lt;br&gt;
OSが初期化されるのでついでにファイルシステムをbtrfs化してWindowsとディスクを共有できるようにします。&lt;br&gt;
また、関係ないですが原神がSteamOSで動くようになったと聞いたので試してみます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Chrome OSのLinux環境のMozcの設定画面を開く</title>
      <link>https://blog.uyorum.net/post/chromeos-config-mozc/</link>
      <pubDate>Wed, 12 Apr 2023 00:55:25 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/chromeos-config-mozc/</guid>
      <description>&lt;p&gt;Mozcの設定画面を開こうとして苦労したのでメモしておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloudflare Zero Trustでイントラネット上のサービスをインターネットへ公開する</title>
      <link>https://blog.uyorum.net/post/cloudflare-zero-trust-publish-service/</link>
      <pubDate>Sun, 26 Mar 2023 16:08:05 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/cloudflare-zero-trust-publish-service/</guid>
      <description>&lt;p&gt;自宅で動いているHome AssistantをGoogle Assistantから操作したかったのでインターネットへ公開することにした。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloudflare Zero TrustのWarpクライアントからTunnel側のホストへアクセスする(ホスト名ベース)</title>
      <link>https://blog.uyorum.net/post/cloudflare-zero-trust-private-hostnane/</link>
      <pubDate>Fri, 06 Jan 2023 19:03:24 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/cloudflare-zero-trust-private-hostnane/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../cloudflare-zero-trust-private-ip/&#34;&gt;前回&lt;/a&gt;の続き。
前回はアドレスでアクセスしましたが今回はイントラのホスト名でアクセスできるようにします。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RHELのサブスクリプションをCloud AccessでAWSに持ち込む</title>
      <link>https://blog.uyorum.net/post/rhel-cloud-access-aws/</link>
      <pubDate>Thu, 05 Jan 2023 20:07:45 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/rhel-cloud-access-aws/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://rheb.hatenablog.com/entry/developer-program&#34;&gt;Red Hat Developer Subscription for Individuals&lt;/a&gt;を使ってAWSにインスタンスを立ててみたのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloudflare Zero TrustのWarpクライアントからTunnel側のホストへアクセスする(IPアドレスベース)</title>
      <link>https://blog.uyorum.net/post/cloudflare-zero-trust-private-ip/</link>
      <pubDate>Thu, 05 Jan 2023 00:41:04 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/cloudflare-zero-trust-private-ip/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../cloudflare-tunnel-edgerouter-x/&#34;&gt;前回&lt;/a&gt;の続き。&lt;br&gt;
&lt;a href=&#34;../cloudflare-zero-trust-warp/&#34;&gt;前々回&lt;/a&gt;と組み合わせてWARPクライアントとTunnelが用意できたので、当初の目的であるWARPクライアントからイントラネットへアクセスする設定を行っていきます。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EdgeRouter XをCloudflare Tunnelに接続する</title>
      <link>https://blog.uyorum.net/post/cloudflare-tunnel-edgerouter-x/</link>
      <pubDate>Tue, 03 Jan 2023 20:17:19 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/cloudflare-tunnel-edgerouter-x/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../cloudflare-zero-trust-warp/&#34;&gt;前回&lt;/a&gt;の続き。&lt;br&gt;
WARPとCloudflare Tunnelを組み合わせて自宅をインターネットへ公開することなく自宅VPNのようなことを実現しようとしているところです。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raspberry PiにDockerでMirakurun/EPGStationを導入する</title>
      <link>https://blog.uyorum.net/post/raspberrypi-mirakurun-epgstation/</link>
      <pubDate>Mon, 02 Jan 2023 16:46:36 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/raspberrypi-mirakurun-epgstation/</guid>
      <description>&lt;p&gt;ずっとやろうと思っていたところ新年に時間が取れたので一気にやっつけた。
それほど目新しいものはないが自分用のメモを兼ねてまとめておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SteamDeckでSteamOSとWindowsの両方でSDカードを使用する</title>
      <link>https://blog.uyorum.net/post/steam-deck-windows-sd-card/</link>
      <pubDate>Mon, 19 Dec 2022 22:43:20 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/steam-deck-windows-sd-card/</guid>
      <description>&lt;p&gt;SteamDeckが届いたので原神をするために早速Windowsを入れました。
SteamOSとWindowsで内蔵ディスクを半分ずつにしたのでどちらのOSにとっても容量が微妙になってしまいました。&lt;br&gt;
（自分が買ったのは256GBモデル）&lt;/p&gt;
&lt;p&gt;そこでSDカードを追加で買ってSteamOSとWindowsの両方の容量を拡張しました。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cloudflare Zero TrustにAndroidを接続するまで（最短経路）</title>
      <link>https://blog.uyorum.net/post/cloudflare-zero-trust-warp/</link>
      <pubDate>Fri, 16 Dec 2022 21:18:59 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/cloudflare-zero-trust-warp/</guid>
      <description>&lt;p&gt;Cloudflare Zero Trustを自宅やクラウドを繋げるVPN代わりに使いたかったのでまずはAndroid端末を接続できるようにする。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ChromeOSのLinuxで日本語入力する（2022年版）</title>
      <link>https://blog.uyorum.net/post/chromeos-crostini-input-japanese/</link>
      <pubDate>Tue, 18 Oct 2022 23:57:14 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/chromeos-crostini-input-japanese/</guid>
      <description>&lt;p&gt;久しぶりにアップデートしたら日本語入力ができなくなってしまったのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>複数インターネット回線を持つFortiGateはRPF機能に注意</title>
      <link>https://blog.uyorum.net/post/fortigate-rpf/</link>
      <pubDate>Thu, 06 Oct 2022 00:02:27 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/fortigate-rpf/</guid>
      <description>&lt;p&gt;FortiGateはデフォルトでRPF（Reverse Path Forwading）という機能が有効になっている（この機能はAnti-Spoofingとも呼ばれることがある）。&lt;br&gt;
FortiGateに複数のインターネット回線（アップリンク）が接続されており、それぞれの回線（グローバルアドレス）でインターネットからのアクセスを受けている場合、
このRPF機能を考慮してルーティングを設定する必要がある。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOSベースのRubyコンテナイメージを作成する</title>
      <link>https://blog.uyorum.net/post/build-ruby-container/</link>
      <pubDate>Thu, 06 May 2021 15:07:29 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/build-ruby-container/</guid>
      <description>&lt;p&gt;Rubyがインストールされたコンテナイメージが欲しかったのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugoで特定ページをリダイレクトする</title>
      <link>https://blog.uyorum.net/post/redirect-on-hugo/</link>
      <pubDate>Tue, 04 May 2021 20:05:25 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/redirect-on-hugo/</guid>
      <description>&lt;p&gt;Hugoで書いている本ブログのパスを変えたかった。静的サイトではできないんじゃないのと思っていたができたのでまとめておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WSL2にPodmanを入れる</title>
      <link>https://blog.uyorum.net/post/podman-on-wsl2/</link>
      <pubDate>Wed, 14 Apr 2021 21:55:17 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/podman-on-wsl2/</guid>
      <description>&lt;p&gt;最近は仕事でPodmanを触る機会が多いので自宅のWSLにもDockerではなくPodmanを入れることにする。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raspberry Pi 4BにKubernetesをインストール（2021年版）</title>
      <link>https://blog.uyorum.net/post/k8s-on-rpi4/</link>
      <pubDate>Sun, 04 Apr 2021 22:18:27 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/k8s-on-rpi4/</guid>
      <description>&lt;p&gt;Kubernetesの状況を加味した構成と手順。できるだけ一次情報も示しながら記録を残していく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Raspberry Pi OS(Raspbian)にOctoPrintをインストールする</title>
      <link>https://blog.uyorum.net/post/install-octoprint-raspbian/</link>
      <pubDate>Wed, 16 Sep 2020 20:36:56 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/install-octoprint-raspbian/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../3d-printer-1/&#34;&gt;前回&lt;/a&gt;、3Dプリンターを買って以降いろいろと調べている。
よく知らなかったが3Dプリンタは自作や改造ができたりするらしく、ちょうど開催されていた技術書典9で見つけた本を買ってみたところ
OctoPrintなるソフトウェアを使うことでネットワーク経由で印刷をすることができることがわかった。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>3Dプリンタ IUSE IUM1 を買った</title>
      <link>https://blog.uyorum.net/post/3d-printer-1/</link>
      <pubDate>Sun, 06 Sep 2020 13:34:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/3d-printer-1/</guid>
      <description>&lt;p&gt;3Dプリンタを買ったので現状まとめておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu 20.04でキーマップをカスタマイズする</title>
      <link>https://blog.uyorum.net/post/ubuntu-custom-keymap/</link>
      <pubDate>Wed, 20 May 2020 23:43:30 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/ubuntu-custom-keymap/</guid>
      <description>前回に引き続き、久しぶりにUbuntuを触ったらてこずったのでメモ。
Linuxでキーマップをカスタマイズする方法といったらXmodmapだったが現在は違うらしい。 Xmodmapでも一時的にキーマップは変わるが、いつのまにか元に戻ってしまう。 代わりに現在ではxkbというものを使うらしい。
調べたところ設定方法はいくつかありそうだった
ルールを使う キーマップを上書きする 新しいキーボードレイアウトを定義する 自分の場合はキーマップの設定はdotfilesで管理したいため2番目の方法を採用した。 ホームディレクトリ以下に追加のキーマップを定義するファイルを作成し、ログイン後に読み込むことにする。
設定したいキーマップ 以下のようにキーマップに変更したい。
Caps Lock を Control へ 無変換 を Control へ 変換 を Shift へ (Apple Magic Keyboard) 英数 を Control へ (Apple Magic Keyboard) かな を Control へ xkbのドキュメントをすべて読めば書き方がわかるのかもしれないが、よくわからなかったのでひとまずネット上の記事を参考にして書いた。
$ mkdir -p $HOME/.xkb/symbols $ cat - &amp;lt;&amp;lt;EOF &amp;gt;$HOME/.xkb/symbols/custom partial modifier_keys xkb_symbols { key &amp;lt;CAPS&amp;gt; { [ Control_L, Control_L ] }; modifier_map Control { &amp;lt;CAPS&amp;gt; }; key &amp;lt;MUHE&amp;gt; { [ Control_L, Control_L ] }; modifier_map Control { &amp;lt;MUHE&amp;gt; }; key &amp;lt;HENK&amp;gt; { [ Shift_R ] }; modifier_map Shift { &amp;lt;HENK&amp;gt; }; key &amp;lt;HJCV&amp;gt; { [ Control_L, Control_L ] }; modifier_map Control { &amp;lt;HJCV&amp;gt; }; key &amp;lt;HNGL&amp;gt; { [ Shift_R ] }; modifier_map Shift { &amp;lt;HNGL&amp;gt; }; }; EOF CAPS、MUHEなどの文字列は</description>
    </item>
    
    <item>
      <title>Ubuntu 20.04でMagic Trackpadのマルチタッチジェスチャーを使う</title>
      <link>https://blog.uyorum.net/post/ubuntu-multitouch/</link>
      <pubDate>Sun, 17 May 2020 21:12:10 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/ubuntu-multitouch/</guid>
      <description>久しぶりにデスクトップをUbuntuにしてみたところ、Magic Trackpadのジェスチャーの設定に苦戦したのでメモ。
環境 Ubuntu 20.04 X11 GNOME Magic Trackpad (2じゃない) 設定 普通にペアリングしてタッチパッドの設定から以下の動作は設定できるようになる。
スクロール方向 左右クリック 2本指スクロール 基本的にはこれでも十分使えるのだが、自分の場合は3本指スワイプで戻る・進む動作をさせたかったので方法を調べてみた。 Ubuntu wikiではginnというツールが紹介されている。 またいろいろとググっているとtoucheggというツールも見つかる。 どちらも試してみたが自分の環境ではどちらも期待通りに動かなかった。
ドライバまわりの話 自分の中でLinuxでタッチパッド周りのドライバといえばSynapticsだったが現在はSynapticsは開発されておらず、 代わりにlibinputというドライバが使われるようになっているらしい。
実際にMagic Trackpadにはlibinputが使われている模様。
$ xinput list | grep -i trackpad ⎜ ↳ Magic Trackpad id=10 [slave pointer (2)] $ xinput list-props 10 Device &amp;#39;Magic Trackpad&amp;#39;: Device Enabled (168): 1 Coordinate Transformation Matrix (170): 1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000 libinput Tapping Enabled (303): 1 libinput Tapping Enabled Default (304): 0 libinput Tapping Drag Enabled (305): 1 libinput Tapping Drag Enabled Default (306): 1 libinput Tapping Drag Lock Enabled (307): 0 libinput Tapping Drag Lock Enabled Default (308): 0 libinput Tapping Button Mapping Enabled (309): 1, 0 libinput Tapping Button Mapping Default (310): 1, 0 libinput Natural Scrolling Enabled (311): 0 libinput Natural Scrolling Enabled Default (312): 0 libinput Scroll Methods Available (313): 1, 1, 0 libinput Scroll Method Enabled (314): 1, 0, 0 libinput Scroll Method Enabled Default (315): 1, 0, 0 libinput Click Methods Available (316): 1, 1 libinput Click Method Enabled (317): 0, 1 libinput Click Method Enabled Default (318): 0, 1 libinput Middle Emulation Enabled (319): 0 libinput Middle Emulation Enabled Default (320): 0 libinput Accel Speed (321): 0.</description>
    </item>
    
    <item>
      <title>fail2banでBotからsshdとNginxを守る</title>
      <link>https://blog.uyorum.net/post/fail2ban-1/</link>
      <pubDate>Thu, 04 Jul 2019 20:32:07 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/fail2ban-1/</guid>
      <description>久しぶりにfail2banを使ったら設定方法を調べるのに苦戦したのでメモ
やりたいこと 以下のようなアクセスを行なったIPアドレスをBotとみなす SSHで認証に失敗したアクセスの送信元アドレス HTTPやHTTPSでよくある攻撃対象のパスへアクセスしてきた送信元アドレス BotとみなしたIPアドレスからのアクセスは以後すべてのポートでDROPするようにする 一度BotとみなしたIPアドレスは永久にブロックする 環境 # cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core) # yum list fail2ban fail2ban.noarch 0.9.7-1.el7 @epel 情報源 いろいろ調べたが結局manが一番参考になるし信用できる．
man fail2ban man jail.conf man ipset インストール # yum install -y fail2ban 設定ファイル類 設定ファイルは/etc/fail2banに集まっている．
fail2ban.conf
fail2ban全般の設定を書く．変更するとしたらログレベルやログファイルのパスくらい． jail.conf
filterとactionの組み合わせ(この記事ではルールと呼ぶことにする)をここで定義していく．デフォルトでいくつか定義されているがすべて無効化されている．
またjail.d/*.confも読み込むようになっている． filter.d/*.conf
どのログをどんな正規表現で監視するか(filter)を定義する action.d/*.conf
IPをブロックする方法(action)を定義する 設定ファイルの書き方 デフォルトでは.confファイルが作成されているが，これらのファイルは編集せずに同名の.localファイルを同じディレクトリに作る方法が推奨されている． .confのうち上書きしたい部分だけを.localファイルに書けばその部分だけ上書きされる．
jailの設定は各ルール共通の設定をjail.localに書き，各ルールの設定と有効化をjail.d/*.localに書くことにするときれいに管理できそう．
fail2banのしくみ jailのlogpathに設定したログファイルをtail jailのfilterに設定した条件(ログイン失敗など)に一致したログをカウント
このときログに含まれる「アクセス元IPアドレス」も認識しておく 設定した頻度に逹したIPアドレスをブロック
ブロックの手段はjailのbanactionで設定する 設定 上に書いたやりたいことを実現すべく設定していく．
SSHで認証に失敗したアクセスの送信元アドレスをBotとみなす jail.confにははじめから以下の内容が書かれている(抜粋)
jail.conf:
[DEFAULT] enabled = false filter = %(__name__)s [sshd] port = ssh logpath = %(sshd_log)s backend = %(sshd_backend)s sshdjailは定義されているが無効化されている filter名はsshd(fail名と同名) sshd_logの値は別ファイルで定義されている パラメータはこのままでよさそうなのでこのjailを有効化する</description>
    </item>
    
    <item>
      <title>バッファローのイーサネットコンバータでトラブった話</title>
      <link>https://blog.uyorum.net/post/buffalo-ethernet-converter/</link>
      <pubDate>Tue, 04 Jun 2019 22:38:40 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/buffalo-ethernet-converter/</guid>
      <description>まとめ Buffaloの無線ルータWEX-G300をイーサネットコンバータとして使っていた この機器が上流(WiFi親機)へのパケットを転送するときに，パケットの送信元MACを自分のMACに変えてしまう ペイロードにMACアドレスが含まれるような通信ではこれが原因で問題が発生しうる 構成 下図のようにWiFiルータ(AP)にBuffaloのWEX-G300を接続，さらに有線ポートにPC(以下，Host A)を接続している． 同じWiFiルータに無線LANを内蔵したPC(以下，Host B)を接続している． Host AとHost Bは同一のL2ネットワークに属している． Pingで確認 Host A → Host B へPingを打ってみる．
Host Aでパケットキャプチャ $ sudo tcpdump -i eno1 -n -e icmp tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on eno1, link-type EN10MB (Ethernet), capture size 262144 bytes 21:43:06.274393 ec:a8:6b:f9:7a:60 &amp;gt; 28:cf:da:02:a5:40, ethertype IPv4 (0x0800), length 98: 10.0.0.3 &amp;gt; 10.0.0.153: ICMP echo request, id 1749, seq 1, length 64 21:43:06.</description>
    </item>
    
    <item>
      <title>ファシリティまわりの設計時に考慮すること(続き)</title>
      <link>https://blog.uyorum.net/post/designing-facility-layer-02/</link>
      <pubDate>Wed, 16 Jan 2019 13:06:37 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/designing-facility-layer-02/</guid>
      <description>前回は主にラックと電源についてまとめた．その続き．
ネットワーク イーサネットを前提としてまとめる．
規格 必要な帯域を確保できるようイーサネットの規格を選択する．イーサネットの規格によってケーブルの種類が決まってくる．ケーブルの種類は以下のような要素に影響してくるので，それらも考慮して決める．
ケーブルの最大長 ケーブルの太さ ケーブルの固さ ケーブルの価格 ケーブルの太さや固さケーブリングのしやすさに大きく影響してくるので特に気をつけたい． また機器側がSFPポートの場合は，ケーブル規格に適合するSFPトランシーバーを選択しなければならない．
長さ エアフローの確保やメンテナンス性を考え，ケーブルはポート間を最短距離で結ぶのではなく，ラックの両脇を通すことになる．それを考慮してケーブルの長さを決める．そのため同一ラック内の場合でもケーブルの長さは最低でも3〜5mくらいにしておいた方が無難． ラック間の接続の場合はさらに注意が必要．データセンターによってはラック間のケーブルを通す場所を通す場所が決まっていることがある．隣接ラックの場合はラック側面のパネルを全部または一部外すことで，ほぼ最短距離でケーブルを設置することができるが，データセンターによってはそれを許可していないことがあるため，事前に確認しておいた方がよい．それが禁止されている場合またはラックが隣接していない場合はケーブルを天井または床下に通すことになる．その場合も必要な長さをデータセンターに確認した方がよい．(データセンターに依頼しなければラック間のケーブルを敷設をしてはいけないこともある)
保守サポート サポート内容 提供されている保守サポートは製品によって異なる．必要な保守内容をよく検討した上で保守を契約する．製品によっては保守の内容がハードウェア/ソフトウェアの2つに分かれている場合があるので確認する．
ハードウェア保守 部品の故障などに対応する ソフトウェア保守 OSやファームウェアの不具合などに対応する 受付時間 サポート窓口の受付時間もいくつかの種類がある．よくある種別は以下の2通り．
24時間365日 平日日中 クリティカルな機器のサポート受付時間が平日日中のみとならないようよく確認する．
センドバック/オンサイト 部品の故障が発生した場合は部品交換または機器ごと交換となるが，その方法は大きく分けて2通りある．
センドバック保守
機器または部品を返送し，修理済の機器や交換用の機器を送り返してもらう．修理までに時間がかかるうえ，機器を送り返してもらうまでその機器は使用できない． オンサイト保守
機器が設置されている場所に保守技術者が来てくれ，その場で機器または部品の交換を行う．センドバック保守より修理までの時間が早いが，保守料金はこちらの方が高い． その他 エアフロー ケーブリングをしやすくするため，ポート面を揃えた方がよい．かつ冷却性を高めるため排気面も揃えるべき． 機器によっては注文時に吸気面，排気面を選択できるが，選択できない機器もあるため設置する機器でポート面と排気面を揃えるように選定する．
付属品 機器によっては以下のようなパーツは別売りとなっている場合がある．データシートなどで付属品を確認し，漏れがないようにする．
ラックマウントキット(羽，レールなど) 電源ケーブル SFPトランシーバー (サーバなど)フロントパネル 以上
インフラ/ネットワークエンジニアのためのネットワーク・デザインパターン 実務で使えるネットワーク構成の最適解27 amazon.co.jp </description>
    </item>
    
    <item>
      <title>ファシリティまわりの設計時に考慮すること</title>
      <link>https://blog.uyorum.net/post/designing-facility-layer-01/</link>
      <pubDate>Sun, 16 Dec 2018 12:58:08 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/designing-facility-layer-01/</guid>
      <description>最近とあるシステムを新規構築するにあたりファシリティまわりの設計をすることになった． 個人的に初めてのレイヤで，かつ暗黙知が多すぎて苦労したので備忘録的にまとめておく．
筆者の知識 ラッキング，ケーブリング作業は行ったことがある 機器選定やラック設計は行ったことがない 扱う領域 このエントリでは自分が考慮した以下の領域についてまとめる．ただし現場ごとの習慣や組織構造などによって考慮すべきことが異なるはずなので注意．
ラック設計 機器選定 ケーブル規格 前提 機器はデータセンターに設置する データセンターは自社所有だが異なる部署が管理している(基本的に設備は勝手にいじれない) サーバ室はコロケーション ラック ラック寸法 機器を設置する部分の幅と高さはEIA規格という規格に準拠して設計されていることが多い(JIS規格というものもあるようだが自分は見たことがない)． EIA規格では幅19インチ，高さが1.75インチの倍数と定めており，だいたいの機器の寸法もこれに従って設計されている．この1.75インチを1単位として1U(ユニット)と呼ぶ． 機器を設置しようとしているラックがEIA規格に準拠していることを確認すればよい．またはEIA準拠のラックを調達する．
ここで注意なのが，EIA規格は機器を設置する部分の幅と高さを定めているが，奥行については定めていないということ．設置しようとしている機器の奥行がラックに収まるサイズかは別途チェックする必要がある． また，ラックの扉の構造や(機器を取り付ける部分ではなく)ラック自体の横幅もラックによって異なる． 通常はネットワークケーブルや電源コードが機器の前後にせり出すうえ，左右にケーブルを這わせたりするため十分なスペースがあるか実物を見て確認しておいた方がよいかもしれない．
耐荷重 通常はラック(というよりはデータセンターか)に対して設置できる機器の総重量が定められている．(自分のまわりではデータセンターにより500kg~1000kgほどの幅がある) 機器のメーカサイトで公開されているデータシートに重量が記載されているため耐荷重を超えていないか確認すべき．
電源 データセンターは電力会社含め，電源設備の故障に備えて複数系統の電源をラック内に設置できることが多い．電源を設置する際には以下の点を考慮する．
電圧 機器によって対応する電圧が異なる．100Vか200Vまたはその両方に対応する機器が存在する．これも機器のデータシートに記載されているため確認しておく． 当然使用する電圧ごとに電源系統をラック内に電源をひきこんでおく必要がある．(ラック内で変圧するような機器もあるかもしれないが自分は知らない)
機器が100Vと200Vの両方に対応する場合にどちらを使えばよいか，自分の場合は主に以下の2点を考慮して決めた
伝送効率 同じ消費電力(W)の場合，100Vと200Vでは200Vの方が電流が小さい分，伝送路の抵抗による電圧降下が小さくなる．(=伝送効率がよくなる)1 サーバのような消費電力の大きい機器の場合はできるだけ200Vで動かすようにした．
電源敷設の手間 同一ラック内で100Vと200Vの機器が混在する場合，そのラックへは100Vと200Vの電源を両方ひきこまなければならない．使用する電圧はできるだけ統一した方が電源設備がシンプルになるうえ，コストダウンにつながる． ただし電源を200Vしか用意しない場合，ノートPCなどで作業を行う場合の電源は別途考えなければならない．
電源口の設置場所 電源口はコンセントバーやPDUと呼ばれる機器をラック内に設置することで確保する． 設置方法はラック側面に設置する方法とラックにマウントする方法がある．
ラック側面に設置する場合，接続口が上下に広く配置されるので電源コードが届かないということはまずない．しかし，コンセントバー自身やそれに挿さる電源コードが機器の出し入れ等の作業の邪魔になることがある．
ラックにマウントする場合，ユニットを消費するうえ，設置位置と電源コードの長さによっては電源コードが届かないということが発生しうる．しかしそれに挿さる電源コード自身が邪魔になるということは少ない．
電源容量 はラックごとに使用できる電源の容量が設定されている．もしこれをオーバーして電力を消費した場合，ブレーカーが落ちてしまう． ラック内の機器の配置を考えるときは機器の消費電力の合計がこの容量を超えないようにする必要がある．
消費電力，有効電力，皮相電力，力率 消費電力(有効電力)
ある機器でどれくらいの電力を消費するか．単位はW．だいたいはデータシートに記載されている．ワークロードの量によって消費する電力は変動するため，実際に機器がどれくらいの電力を消費するか事前に見積もるのは難しい．(データシートには標準電力，最大電力のように分けて記載されているものもあり，参考にはなる)
自分の場合は最大電力の50%くらいで見積もった．消費電力を測る機能を持つPDUもあるため，設置後も消費電力をモニタリングし続けるのがいいだろう． 皮相電力
電源設備が供給することのできる電力．単位はVA．例えば6000VAの場合は200Vで合計60Aの電流を流すことができるということになる． 力率
交流回路では必ずしも6000VAの皮相電力で6000Wの有効電力が得られるわけではない．機器ごとに力率という値が存在し，「皮相電力x力率」の値が実際に機器で使用できる電力となる．
つまり皮相電力6000VAのラックに消費電力6000Wの機器は設置できない(1台でこれだけ電力を消費する機器はなかなかないと思うが)ということ．設置する機器の力率を考慮する必要がある．(しかし多くの場合，力率はデータシートにも記載されていない)
皮相電力6000VAのラックには，例えば力率60%/消費電力3600Wの機器まで設置できることになる． 電源端子の規格 家庭用機器にある平型2P以外にも，データセンターにおいては様々な端子を扱う．端子形状はデータシートに記載されているためプラグとソケットに規格を合わせるように気をつける．
電源端子の形状については以下のページがよくまとまっている．
特注電源ケーブル　|　エイム電子株式会社
長くなったので今回はここまで
続き→ファシリティまわりの設計時に考慮すること(続き)
インフラ/ネットワークエンジニアのためのネットワーク技術&amp;amp;設計入門 第2版 amazon.co.jp 参考 サーバーラック　EIA規格について - サンワサプライ株式会社</description>
    </item>
    
    <item>
      <title>NginxでLet&#39;s Encryptの証明書を扱う</title>
      <link>https://blog.uyorum.net/post/letsencrypt-nginx/</link>
      <pubDate>Sat, 15 Dec 2018 18:19:48 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/letsencrypt-nginx/</guid>
      <description>自分なりのベストな設定をメモ
環境 $ cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core) $ rpm -q certbot nginx certbot-0.29.1-1.el7.noarch nginx-1.12.2-2.el7.x86_64 証明書の新規発行 WebサーバにNginxを使用しているような環境で，Certbotを使って(更新を含む)証明書を発行するには以下 のような方法が考えられる．
Plugin 概要 Webroot 指定したディレクトリにトークンを配置し，任意のWebサーバ(今回の環境ではNginxを使うことになるだろう)で公開することで認証を行う Nginx Nginxを使用して認証を行う．また取得した証明書を使うようNginxを自動で設定する Standalone Certbot自身がHTTPをListenして認証を行う DNS 取得したい証明書のドメインのTXTレコードにトークンを登録することで認証を行う DNS Pluginを使えば認証のためにサーバを設定する必要がなくなるためベストなのだと思うが，自分が使用しているDNSサービス(No-IP)ではTXTレコードを設定できないため却下．Nginxの設定は自分で管理したいためNginx Pluginも却下． Webroot Pluginを使って証明書を新規発行する場合，一度Nginxを(ほぼ)デフォルトの設定で起動させて証明書を取得後，証明書を使うようNginxの設定を変更してからNginxを再起動するという面倒な手順になる．そのため，証明書の新規発行はNginxを起動させる前にStandalone Pluginで行う(既にNginxが起動していた場合は80番ポートが競合することになるためうまくいかない)．
# certbot certonly --standalone -d &amp;lt;DOMAIN NAME&amp;gt; -m &amp;lt;MAIL ADDRESS&amp;gt; --agree-tos -n これにより以下のファイルが作成される
サーバ証明書…/etc/letsencrypt/live//fullchain.pem 秘密鍵…/etc/letsencrypt/live//privkey.pem これらを使用するようNginxを設定すればよい．
証明書の更新 以降はNginxが起動しているはずだ．Nginxが80番ポートをListenしないよう設定しているならよいが，自分の環境ではHTTPをHTTPSへリダイレクトするようにしたかったためNginxは80番ポートもListenしている． そのため証明書の更新ではStandalone Pluginは使えない．1 そこで証明書の更新はWebroot Pluginと既に起動中のNginxを使うことにする．Nginxにはそのための設定をあらかじめ入れておく．2
server { listen 80; listen [::]:80; server_name &amp;lt;DOMAIN NAME&amp;gt;; # Load configuration files for the default server block.</description>
    </item>
    
    <item>
      <title>インターネット付きマンションでLAN上のホストをインターネット公開する(設計編)</title>
      <link>https://blog.uyorum.net/post/publish-with-openvpn-1/</link>
      <pubDate>Sun, 28 Oct 2018 17:52:09 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/publish-with-openvpn-1/</guid>
      <description>背景 これまでの私の自宅は自身で回線とISPを契約してインターネットに接続していた． しかし最近，マンションでインターネット回線を一括契約し各部屋からは無料でインターネットに接続できるようになった． 月々の回線費用が浮くためできればこちらの回線に移行し，自分で契約した回線は解約したい． しばらく使ってみて回線速度は十分であることが確認できたのだが，各部屋へはプライベートアドレスしか与えられないためそのままではLAN上のホストをインターネットへ公開することができない． そこで手段を考えてみた．
これまでの論理構成図 ルータでPPPoE接続する．ルータがグローバルアドレスを持つ LAN上のいくつかのホストへはポートフォワードによりインターネットからアクセスできる OpenVPN(L3)サービスをインターネットへ公開し，VPNへ接続したホストはVPNを介しLAN上のホストと通信できる 課題 よくある提供形態だと思うのだが，我が家のマンションのインターネットも，各部屋へはDHCPによりプライベートアドレスが払い出される形式のため，グローバルアドレスはもらえない． そのためポートフォワードを設定したりVPNのサービスをインターネットへ公開することもできない． そこで以下のような構成を考えた
インターネット上にLinuxを用意してVPNサービスを公開する，宅内のLAN上のホストからそこへVPN接続する 同じLinux上でポートフォワードを設定し，VPNにより構成されたトンネルを通ってLAN上のホストへパケットをフォワードする PCなどでインターネットからVPNを接続することで宅内のホストと通信できるようになる 変更後の論理構成図 論理構成図は以下のようになる．
ここでL2VPNにしているのは，フォワードした返りのパケットをVPN側へ流すようにするため．ポートフォワード先のホストはあらかじめデフォルトゲートウェイをL2VPN上のLinuxが持つIPアドレスにしておく． より高度なルーティング機能があればL3VPNにして，ポートフォワードされた返りのパケットだけをVPN側へ流すといったこともできるのかもしれないが，そういった機器を持っていないためこのような構成にした．
用意するもの この構成を実現するには以下のようなホストを用意することになる
インターネットからアクセス可能なLinuxサーバ L2VPNサーバを構築 L2VPNクライアントとして動作可能なホスト L2VPNクライアントとしてLinuxサーバへ接続する 今回はここまで</description>
    </item>
    
    <item>
      <title>Home AssistantのデプロイをHass.ioにした</title>
      <link>https://blog.uyorum.net/post/hassio-introduction/</link>
      <pubDate>Thu, 28 Jun 2018 15:06:06 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/hassio-introduction/</guid>
      <description>&lt;p&gt;これまでHome AssistantはRaspbianにインストールしたDocker上で動かしていたがHass.ioに移行した．&lt;br&gt;
移行にあたって実施したことをまとめておく．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>必要最低限の設定で監視エージェントに監視させる</title>
      <link>https://blog.uyorum.net/post/security-settings-for-zabbix-agent/</link>
      <pubDate>Tue, 12 Jun 2018 10:19:17 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/security-settings-for-zabbix-agent/</guid>
      <description>&lt;p&gt;監視エージェントで監視をする際に，&lt;strong&gt;必要最低限の&lt;/strong&gt;権限設定で監視できるようにしてみる．&lt;br&gt;
Zabbix Agentを例にとって記述するが，他の監視エージェントでも同様のことが言えると思う．&lt;/p&gt;
&lt;p&gt;なお，ここでは監視に必要な必要最低限の権限を付与するという点を最優先した設定を考える．運用を考えると必ずしも最適とは言えない可能性があるため注意が必要．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FP技能検定3級を受けた</title>
      <link>https://blog.uyorum.net/post/fp-l3/</link>
      <pubDate>Sun, 27 May 2018 18:23:33 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/fp-l3/</guid>
      <description>2018/5/27にFP技能検定3級を受けたのでその記録．
なぜ受けたのか 各種公的制度や一部の資産設計において知識が不足していると感じていたため 公的年金 健康保険 生命保険 各種税金 etc. これらの知識を自身のライフプランの設計に役立てたかったため 試験形式 FP技能検定とは | 日本FP協会
FP技能検定は学科試験と実技試験からなり，実技試験は試験申し込み時に選択することになる．
3級の場合は「資産設計提案業務」「個人資産相談業務」「保険顧客資産相談業務」からひとつ選択する．
試験実施団体は2つあり，選択できる実技科目が異なる．自分の場合は「個人資産相談業務」を選択したため「一般社団法人 金融財政事情研究会」(金財)で受験した．
試験対策 使用した教材など スッキリわかるFP技能士3級(TAC出版) 簿記の資格をとったときにこのシリーズを使って，わかりやすかったため選んだが説明が不足しすぎていて納得できない記述もあり．丸暗記にはいいのだろうが自分には合わなかった 過去問.com 試験問題 | 一般社団法人　金融財政事情研究会 学科試験 まずは上記の参考書の学科対策部分をひととおり読む．自分の場合は通勤中に20~30分間ほど読めるので，それを1ヶ月ほど続けた．合計およそ400分ほどか．
本を広げることができない環境では過去問.comを使っていた．過去問全問(およそ1000問)の中からランダムで出題してくれ，会員登録していれば正答数も記憶してくれる． 有志の方がかなり詳細な解説を追加してくれているのでよい勉強になる．これは試験当日まで続けていて，おぼそ270問正答している状態だった．
参考書の学科部分を読み終わったのが4月末ころ．GWは何も勉強しておらず，その翌週から過去問を解き始めた．
ありがたいことに過去問と解答はFP協会や金財のサイトで公開されているため容易に入手できる．直近のものから順に解いていった．
この時点で出題形式や時間配分なども把握しておく．
解答は公開されているが解説はないので自分で参考書やインターネットで調べていく．対象は不正解だったところと，試験を解きながら自信がないと感じたところ．
毎回2問ほどは調べきれなかったり納得できない問題があったが，それらは捨て問題とし深くは追求しないことにした．
このやり方で3~4回分ほど解いたところ，正答率は8割前後(合格ラインは6割)で安定していたためここで学科試験対策は終わりにし実技試験対策へ移行した．
実技試験 以下は自分が受験した「個人資産相談業務」における話．
まず過去問を解いてみたところ正答率は6割強といったところだった．ただし学科試験と異なり実技試験は問題によって配点が異なるため問題数で6割正解しても不合格となる可能性がある．
採点後は学科試験と同じように調べながら知識不足な箇所を潰していく．
なおこの期間も通勤中などで過去問.comでの演習は続けていた．
余談だが年金や税金はやはり公式サイトが説明が詳細で参考になった．
日本年金機構 タックスアンサー（よくある税の質問）｜国税庁 以上のようなやり方で合計で5~6回分ほど解いていった．試験前日に解いた回は(点数にして)8~9割はとれるようになっていた．
試験結果 まだ試験結果は公開されていないため自己採点だが学科49/60問，実技50/50点だった</description>
    </item>
    
    <item>
      <title>ホームオートメーションの現状まとめ@2017</title>
      <link>https://blog.uyorum.net/post/home-automation-2017/</link>
      <pubDate>Sat, 30 Dec 2017 00:15:15 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/home-automation-2017/</guid>
      <description>&lt;p&gt;今年はホームオートメーションにたくさん取り組んだ年だった．
年末ということでキリもよいので現状の我が家がどうなっているかまとめておく．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FactoryBotでテストのはじめにデータを用意する</title>
      <link>https://blog.uyorum.net/post/factorybot-1/</link>
      <pubDate>Fri, 29 Dec 2017 17:17:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/factorybot-1/</guid>
      <description>&lt;p&gt;Fixturesの管理のしづらさに耐えかねてFactoryBotへ移行しようとしている，とあるRailsプロジェクトがあるのだが，移行に際して懸念していることがテストの低速化だ．
Fixturesならテストの前にレコードを作成しテストでそれを使い回すことになる一方で，FactoryBotの場合は下手するとexampleの数だけINSERT文が走りテストの低速化を招く．
Fixturesのように，FactoryBotを使ってテストの最初にレコードを作成することができればそれを回避することができると考え，仕組みを考えてみた．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RSpecでFakerを使うならKernel.srandを設定しておけという話</title>
      <link>https://blog.uyorum.net/post/rspec-faker-1/</link>
      <pubDate>Thu, 28 Dec 2017 18:19:55 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/rspec-faker-1/</guid>
      <description>&lt;p&gt;RSpecでFaker&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;を使ってテストデータを用意している場合，テストデータが毎回ランダムになるゆえに，特に工夫をしないとテストを再現させることができなくなる．&lt;br&gt;
パスしなかったテストを再現できないとトラブルシュートが難しくなってしまうが，それをある程度解決する方法を見つけたのでメモしておく&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Trago Capを使ってみて</title>
      <link>https://blog.uyorum.net/post/trago-smart-cap/</link>
      <pubDate>Sun, 03 Dec 2017 17:48:36 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/trago-smart-cap/</guid>
      <description>&lt;p&gt;水分摂取量を自動で記録してくれる&lt;code&gt;Trago Cap&lt;/code&gt;を使ってみて，いろいろと思うところあったので記録しておく．&lt;br&gt;
結論から言うと，様々な理由により自分は現在この製品は使っていない．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESP32とMongooseOSを使ってTSL2561で照度を取得する(実装編)</title>
      <link>https://blog.uyorum.net/post/tsl2561-with-mongoose-os-on-esp32-02/</link>
      <pubDate>Sat, 02 Sep 2017 10:41:35 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/tsl2561-with-mongoose-os-on-esp32-02/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;../tsl2561-with-mongoose-os-on-esp32-01/&#34;&gt;前回&lt;/a&gt;の続き．
Mongoose OSの設定とTSL2561を使うためのコードを書いていく．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESP32とMongooseOSを使ってTSL2561で照度を取得する(準備編)</title>
      <link>https://blog.uyorum.net/post/tsl2561-with-mongoose-os-on-esp32-01/</link>
      <pubDate>Wed, 02 Aug 2017 20:53:04 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/tsl2561-with-mongoose-os-on-esp32-01/</guid>
      <description>&lt;p&gt;かねてから触ってみたいと思っていたMongooseOSと以前買ったTSL2561照度センサーモジュールがあったのでESP32にMongooseOSを入れて照度を取得してみようと思った．&lt;br&gt;
そもそもI2Cデバイスを触るのが初めてだったため、いきなりMongooseOSでそれを扱おうとするのはハードルが高すぎると考え、まずはその準備編として情報の多いRaspberryPiで照度を取得してみることにした．&lt;br&gt;
最後にESP32へのMongooseOSのインストールも行っておく．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fitbit Charge2用サードパーティ製バンドを買った</title>
      <link>https://blog.uyorum.net/post/fitbit-charge2-bands/</link>
      <pubDate>Mon, 03 Jul 2017 21:10:46 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/fitbit-charge2-bands/</guid>
      <description>&lt;p&gt;今年の2月末に購入したFitbit Charge2のバンドのゴムがコネクタ部分から浮いてきてしまった．使用上は問題ないのだが気になってしまうので替えのバンドを購入した．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Infrastructure as Code 感想 (6-9章)</title>
      <link>https://blog.uyorum.net/post/infrastructure-as-code-chap6-9/</link>
      <pubDate>Thu, 29 Jun 2017 21:52:49 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/infrastructure-as-code-chap6-9/</guid>
      <description>オライリーの「Infrastructure as Code」を読んで思ったことや自分的メモをまとめておく．太字は自分の感想， 斜字体は本からの引用 ，そのほかは本の要約など．
6~9章は各領域での設計パターンやプラクティスを整理している
サーバーのプロビジョニング サーバーに含まれるもの ソフトウェア 構成/設定 データ ログもここに含まれる インフラストラクチャはサーバのアップデート，交換，削除のプロセスを通して，一貫して「データ」へのアクセス性を提供しなければならない プロセスのさまざまな部分にかかる時間を計測するようにしなければならない これはいろんなところに言えそう．次からは時間を計測することを考えるようにしようと思う サーバーのテンプレート管理 構築方法 原始イメージでサーバーを作成し設定を変更する ほかのサーバーに原始イメージディスクをマウントし変更を加える chrootを使う ブート，シャットダウンの時間を省略できる テンプレート上にログが作成されないのでわざわざ削除する必要がない Netflix/aminator: A tool for creating EBS AMIs. This tool currently works for CentOS/RedHat Linux images and is intended to run on an EC2 instance. このやり方は思い付かなかった テンプレート自体にもバージョン番号を付け，各サーバーがどのテンプレートから作成されたか追跡できるようにする テンプレートをアップデートしたら既存のサーバーも作成しなおせ，さもないと構成ドリフトが発生する これをやるのはすごく難しいと思うのだが．サービスを停止せずにサーバーを入れ替えなければならない テンプレートに変更を加えたら既存サーバーにも同じ変更を加えるようにするのが妥協ラインかな… サーバーのアップデート/変更 プッシュ同期 プル同期 変更後のテストもサーバーから自発的に実行できる必要がある？ サーバー上で動かしても問題なさそう：aelsabbahy/goss: Quick and Easy server testing/validation あるいはモニタリングにまかせる 異常が起こった場合の切り戻しはどうやってトリガーする？ マスターレス構成管理 SPoFがなくなる サーバー作成直後の設定とサーバーのアップデートは必ずしも同一の仕組みとは限らない，という前提でこの本は書かれている気がする インフラストラクチャ定義 適切なスタックにインフラを分割し，定義，実装する 人々が変更を加えるのを恐れるようになったら，インフラストラクチャ定義がモノリシックになってきていると考えることができる スタックの共有(DBサーバの共有など)は避けるべき 5章で説明された通りどうしても共有されるサービスは存在する．その場合はサービスレベルを定める アプリケーションコードとインフラストラクチャコードを統一的に管理する Googleのような巨大リポジトリでの開発には，呼び出し先の変更と同時に呼び出し元も変更できるという利点がある．1 これと似たような考え方か． 既存の設計パターンを当てはめようとすると，かえって複雑になる場合がある．設計を見直すことも必要 管理しやすようにやり方を変える．手段と目的が逆転してるように感じるが大事 参考文献 Kief Morris, Infrastructure as Code クラウドにおけるサーバ管理の原則とプラクティス, 長尾高弘訳, オライリー・ジャパン, 2017 Infrastructure as Code ―クラウドにおけるサーバ管理の原則とプラクティス amazon.</description>
    </item>
    
    <item>
      <title>Infrastructure as Code 感想 (5章)</title>
      <link>https://blog.uyorum.net/post/infrastructure-as-code-chap5/</link>
      <pubDate>Wed, 21 Jun 2017 22:47:39 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/infrastructure-as-code-chap5/</guid>
      <description>オライリーの「Infrastructure as Code」を読んで思ったことや自分的メモをまとめておく．太字は自分の感想， 斜字体は本からの引用 ，そのほかは本の要約など．
インフラストラクチャサービス，ツールが満たすべき条件 外部定義を使えるツールを選ぶ DBに設定を保持するツールはどうすればいいか 設定をyamlなどで構造化してテキストに保存．それを読み込んでAPIを発行，サービスへ設定を反映させる．確実に両者が同一の内容であることを確信するいは逆(サービスからyamlへ)もできる必要がある インポート/エクスポートを使う．(エクスポートした設定情報は大抵は人間が読むようにはできていない．独自のフォーマットで書かれていて容易にパースできない) (本に書いてある例)SeleniumのようなものでGUIを操作する いずれにしても辛そう．よほどのことがない限りそのようなツールは選択すべきでない インフラストラクチャがダイナミックだという前提で作られたツールを選ぶ サービス自身とサービスが管理するものの変化に柔軟に自動的に追従，対処できるもの ライセンスがクラウド互換になっている製品を選ぶ ここでは主に柔軟性に関するもの 疎結合をサポートする製品を選ぶ チーム間でのサービスの共有 チーム間で共有される可能性のあるサービス モニタリング，CI，バグ追跡(BTS？)，DNS，アーティファクトリポジトリ(構成レジストリ？) それを使うチームの要件，使われ方の特性などが様々になり，それ自体が小さなパブリックサービスのようにみなせるかもしれない それぞれサービスレベルやサービス仕様を定めてチームに使ってもらう ふつうにマイクロサービスアーキテクチャの考え方みたい モニタリング モニタリングの目標は，必要とする人に必要なときに適切な情報を提供すること つまり，モニタリングシステムの設計を始める前に想定ユーザを決めるフェーズがあるということ．今までは考えたことなかった 個々のイベントは問題ないが，それが頻発する場合は問題がある可能性がある場合，頻度に関する閾値を設ける (a)日常の仕事を続行する，(b)大声を出して今していることを中断し，対策に乗り出す どちらを取るべきかをすぐに判断できるようなのでなければならない 複数のサーバーに関連性があることを自動的にタギングしなければならない Zabbixでもネットワークディスカバリ，ローレベルディスカバリ，AgentのUserParameterあたりを使えば自動でタギングできるが，ダッシュボードを動的に生成できないのが辛い つまりZabbixはInfrastructure as Codeに適していない DataDogやMackerel(おそらくNewRelicも)はこのへんの考え方が前提になってる Prometheusはこのあたりどうなんだろう．Grafanaと組み合わせれば普通にできそう(それを言えばZabbixでもいいのだが) サービスディスカバリ サーバーサイドサービスディスカバリ ロードバランサが結局ボトルネックになったりする クライアントサイドサービスディスカバリ 通常，こちらの方がアプリケーションは複雑になる アプリケーションのlocalhostにロードバランサを用意すればいろいろ解決しそう 参考文献 Kief Morris, Infrastructure as Code クラウドにおけるサーバ管理の原則とプラクティス, 長尾高弘訳, オライリー・ジャパン, 2017 Infrastructure as Code ―クラウドにおけるサーバ管理の原則とプラクティス amazon.co.jp </description>
    </item>
    
    <item>
      <title>スマートボトルの選定</title>
      <link>https://blog.uyorum.net/post/choosing-smart-water-bottle/</link>
      <pubDate>Sun, 18 Jun 2017 16:56:40 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/choosing-smart-water-bottle/</guid>
      <description>&lt;p&gt;現在使っている水筒(ケータイマグ 600ml)が古くなってきて，新しいものに変えたい．最近Fitbitで水分補給量も記録するようになったが手動入力が面倒なのでこれを自動でやってくれる水筒を選定した&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Infrastructure as Code 感想 (4章)</title>
      <link>https://blog.uyorum.net/post/infrastructure-as-code-chap4/</link>
      <pubDate>Sat, 17 Jun 2017 18:17:36 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/infrastructure-as-code-chap4/</guid>
      <description>&lt;p&gt;オライリーの「Infrastructure as Code」を読んで思ったことや自分的メモをまとめておく．&lt;strong&gt;太字は自分の感想&lt;/strong&gt;， &lt;em&gt;斜字体は本からの引用&lt;/em&gt; ，そのほかは本の要約など．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Infrastructure as Code 感想 (3章)</title>
      <link>https://blog.uyorum.net/post/infrastructure-as-code-chap3/</link>
      <pubDate>Thu, 15 Jun 2017 23:14:55 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/infrastructure-as-code-chap3/</guid>
      <description>オライリーの「Infrastructure as Code」を読んで思ったことや自分的メモをまとめておく．太字は自分の感想， 斜字体は本からの引用 ，そのほかは本の要約など．
ツールの要件 他のツールを連携しやすいこと コマンドライン引数や環境変数などでの入力，パースしやすい結果出力 設定の外在化 自動実行しやすいこと 冪等性など 失敗したらわかる 周辺のツールとの連携しやすさは意識して考慮に入れてなかった 考え方はすごくよくわかる．UNIX哲学に通じている 構成レジストリ コンフィグ定義ツールが提供するもの(Chef Server, Ansible Towerなど) Zookeeper/Consul/etcd プログラムによるレジストリエントリの追加，更新，削除をサポートしていること こういうのほしいと前から思っていたけどどうやって実装すればいいか，定義ツールとどう連携させればいいかイメージついてない 軽い構成レジストリ S3やVCS上のファイル HTTP等で配布．こうすることで可用性，スケーリングしやすい．管理が単純 頻繁に更新されて複雑になる部分は分割やシャーディングで対応する こうした場合，例えばAnsibleへはどうやって渡せばいいんだろうか ansible-playbook実行前にyaml組んでvar_fileなどに渡す ダイナミックインベントリみたいなことはできなさそう．一回ファイルに吐き出す必要がある？ json組み立ててansible-playbookの--extra-varsオプションに渡す Ansible TowerのAPIでも渡せるかも Consumer Driven Contract Testing Itamaeのnode.validate!はまさにこれだと思う1 こんな記事出てきた Consumer-Driven Contracts: A Service Evolution Pattern Pactのようなツールで容易に書けそう CMDB CMDBとInfrastructure as Codeは構成管理に対するアプローチが正反対．両者を同一視してはならない ただしすべてを自動化するならInfrastructure as CodeはCMDBを兼ねることができる．またはInfrastructure as CodeがCMDBも管理することができる ハードウェアも含めてすべてを自動化はけっこうハードル高そう その他 インフラを完全に管理，自動化するために，やり方を変えるだけでなく自動化しやすいようにタスクそのものを見直すメンタルを忘れてはいけない 以上
参考文献 Kief Morris, Infrastructure as Code クラウドにおけるサーバ管理の原則とプラクティス, 長尾高弘訳, オライリー・ジャパン, 2017 Infrastructure as Code ―クラウドにおけるサーバ管理の原則とプラクティス amazon.</description>
    </item>
    
    <item>
      <title>Infrastructure as Code 感想 (2章)</title>
      <link>https://blog.uyorum.net/post/infrastructure-as-code-chap2/</link>
      <pubDate>Mon, 12 Jun 2017 20:48:25 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/infrastructure-as-code-chap2/</guid>
      <description>オライリーの「Infrastructure as Code」を読んで思ったことや自分的メモをまとめておく．太字は自分の感想， 斜字体は本からの引用 ，そのほかは本の要約など．
ダイナミックインフラストラクチャの要件 NISTのクラウドの要件より広い． 「オンプレミスで，ただひとつのシステムを稼動させるためのインフラ」も考慮に入れているからだろう プラットフォームから提供されるリソース 計算リソース ストレージリソース ブロックストレージ オブジェクトストレージ ネットワーク化されたファイルシステム NFS，SMB これらのテクノロジは，サーバーが頻繁に追加，削除されるような環境にはうまく適合しない GlusterFS，HDFS，Ceph 上記の課題に対応できるよう設計されているが，自分の環境でそれがうまくいっていることをきちんとテストすることが重要 代わりにアプリケーションレベルやブロックレベルのレプリケーションで事足りる場合もある ネットワークリソース 特定のデバイスが高価過ぎて，チームがテストインスタンスを確保できない場合がある．そのような状況に置かれたチームは，優先順位を考えてもっと安いデバイスを使うようにすべきだ 確かに，結局のところ同じハードを同じだけ用意しないとテストできないのだが，そのために使うデバイスを安いものにしろ，という言説は初めて見た．だいたいは仮想化してお茶を濁すのに． 独自クラウドを構築するためのトータルコスト 既存のインフラ，データセンター，知識にかけたコストも自前のホスティングを続ける理由としてよく挙げられる．(中略) しかし，これはサンクコストの呪縛というものだ． クラウドのポータビリティ クラウドインフラへの移行を計画するときによく浮上する要件のひとつに，ひとつのクラウドベンダーによる囲い込みを避けるというものがある．(中略) しかし，この要件に時間と金を注ぎ込みすぎないよう注意しなければならない 確かに，クラウドの一部の機能をサードパーティ製のツールで置き換えたところで依然として移行のコストは大きいし，だいたいの場合は運用のコストが上がる あるクラウドでのやり方が(将来にわたって)それが別のクラウドでそのまま利用できるとは限らない 例えば，TerraformでEC2とGCEにインスタンスを作るだけで全く文法が違う(Terraformの批判をしているわけではない) クラウドやツールが将来仕様変更をするかもしれないし サードパーティ製のものを使うことでよりよりワークフローを得られる可能性がある場合は検討すべき(CodeCommitとCodeBuildの代わりにGithubとTravisCIとか) 自動テストプロセスを継続して維持・使用することで，自信をもって移行を実施できるようにしておくのが現実的な方策 クラウドと仮想マシンに対するマシンレベルの共感 そのプラットフォームで最大のパフォーマンスを引き出すための話？ 必要性は分かるが，ポータビリティとは真逆の話に見える あまりにそのクラウドに最適化してしまうとポータビリティを落とす要因になりそう オンプレの場合でも，構成に応じて最適化しつつそれらを管理するのは大変そう．妥協して汎用的なサーバーを横に並べる形になりそう 参考文献 Kief Morris, Infrastructure as Code クラウドにおけるサーバ管理の原則とプラクティス, 長尾高弘訳, オライリー・ジャパン, 2017 Infrastructure as Code ―クラウドにおけるサーバ管理の原則とプラクティス amazon.co.jp </description>
    </item>
    
    <item>
      <title>Infrastructure as Code 感想 (1章)</title>
      <link>https://blog.uyorum.net/post/infrastructure-as-code-chap1/</link>
      <pubDate>Sun, 11 Jun 2017 19:05:42 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/infrastructure-as-code-chap1/</guid>
      <description>オライリーの「Infrastructure as Code」を読んで思ったことや自分的メモをまとめておく．太字は自分の感想， 斜字体は本からの引用 ，そのほかは本の要約など．
Infrastructure as Codeの目標 ざっくり言うと「(頻繁な)変化に柔軟に対応できるようになること」ということかなと思った そのために システム変更が日常茶飯事の出来事になること 失敗を完全に防ぐという前提は捨てる．失敗しても素早く修正できるようになることを目指す 反復的なタスクは自動化すること 継続的な改善をすること 会議やドキュメントでソリューションを論ずることなく，実装，テスト，計測を通じてソリューションの効果が証明できるようになること Infrastructure as Codeでこれを目指す，というのがピンと来なかった 課題 サーバースプロール，構成ドリフト，スノーフレークサーバーは自分の環境ではほとんどないかな いちおうChefを使っている ロールごとにVMを作成して役割が混ざらないようにしている オートメーション恐怖症…これはある サーバーに統一性がない→オートメーションにより何かが壊れないかが心配→オートメーションツールの外で変更を加える→… の悪循環 この循環から抜けるには「自動化された変更」のリリースプロセスの確立とテストの充実が必要になると最近は考えている 「この変更」を「この方法」で適用するのは安全である，と自動的に言えるようになればいい ペットから家畜へ 数年前からよく聞くようになった サーバ名にテーマを設け，自分がプロビジョニングした新しいサーバーの名前をじっくり考えていた時代が懐しい．しかし，担当するすべてのサーバーを手作業で調整し，サーバーのご期限をうかがわなけれあならなかった時代は懐しくない おもしろい 統一的なシステム 一部のサーバーでより大きなディスクが必要になった場合 すべてのサーバーを同じように拡張する xl-file-serverのような新しいロールを追加する 自分だと深く考えずに(ロールを分けずに)そのサーバーだけ拡張してしまいそうだと思った(ディスクサイズだけ変数化しておけばいいじゃん) その些細な差異が積み重なって管理システムと人に負荷を与えることになる．気をつけたい 反復的なシステム 「パーティションの分割」のような些細なタスクであろうとも，手動でやってしまうと差異が生じる可能性がある． サイズ，ファイルシステム，そのパラメータ etc. スクリプトで実行できるシステムはかならずスクリプトにする そして，将来同様のタスクをするとになったときにそのスクリプトを使う ←これが難しい．スクリプトを書くだけでなく管理システムに組み込まなければならない スクリプトにするのが難しい場合は問題を掘り下げて，役に立つテクニックやツールがないか，別の方法がないかを検討する 継続的にサービスを利用可能状態に保つ 永続化が必要なデータの定義を広げることが大切．通常はアプリケーションの構成/設定，ログファイルなども保護対象に含める サーバーを家畜のように扱うことを前提に，サーバー上のほとんどの情報はいつ失われてもよい状態にしておくということか 参考文献 Kief Morris, Infrastructure as Code クラウドにおけるサーバ管理の原則とプラクティス, 長尾高弘訳, オライリー・ジャパン, 2017 Infrastructure as Code ―クラウドにおけるサーバ管理の原則とプラクティス amazon.co.jp </description>
    </item>
    
    <item>
      <title>Home AssistantとAmazon Dash Buttonを連携させる</title>
      <link>https://blog.uyorum.net/post/home-assistant-with-dash-button/</link>
      <pubDate>Sat, 10 Jun 2017 20:20:04 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/home-assistant-with-dash-button/</guid>
      <description>&lt;p&gt;Amazon Dash Buttonは間違った使い方ができることで有名だが，Amazon Dash ButtonからHome Assistantでアクションをキックできるようにしてみる．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Home Assistantで人感センサーを使って照明を自動点灯する</title>
      <link>https://blog.uyorum.net/post/home-assistant-gpio/</link>
      <pubDate>Sun, 23 Apr 2017 21:33:54 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/home-assistant-gpio/</guid>
      <description>&lt;p&gt;Home Assistantで人感センサーを使って自宅の廊下の電球を点灯/消灯するシステムを組んでみる．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Home Assistantでつくるホームオートメーション(導入編)</title>
      <link>https://blog.uyorum.net/post/home-assistant-install/</link>
      <pubDate>Sat, 22 Apr 2017 21:48:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/home-assistant-install/</guid>
      <description>&lt;p&gt;ホームオートメーション/スマートホーム化を実現できるOSSのHome Asssitantについて&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ruby on RailsのAsset Pipelineとインクルードとプリコンパイルの動作</title>
      <link>https://blog.uyorum.net/post/rails-asset-pipeline-1/</link>
      <pubDate>Wed, 01 Mar 2017 23:01:28 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/rails-asset-pipeline-1/</guid>
      <description>&lt;p&gt;Ruby on RailsのAsset Pipelineについて取り組む機会があったが，動きをよくわかっていなかったため解決までに非常に多くの時間をかけてしまった．
いろいろと知識を詰め込んだので復習も兼ねてまとめていく．
おそらくRailsを使い慣れている人にとっては基本的すぎる内容．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Erato Audio Apollo7 レビュー</title>
      <link>https://blog.uyorum.net/post/apollo7-1/</link>
      <pubDate>Sun, 09 Oct 2016 17:39:14 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/apollo7-1/</guid>
      <description>Erato Audio社の完全ワイヤレスイヤホンApollo7を買って1週間ほど使ったので使用感とかレビューを書いておきます．
なぜ今買ったか 完全ワイヤレスイヤホンという分野を知ったのは2014年にKickstarterでEARINが発表されたときでした． そのときは非常に気になっていたのですが，スペック的にいくつか気になるところもあり，まだ新しい分野でもあったので買うのはもう少し製品が成熟してからにしようと思って手を出しませんでした． 以降はこの分野については特にウォッチはせずに忘れていたのですが，最近AppleからAirPodsが発表されたのを見て思い出して再度調べてみたのがきっかけでした． いくつかのメーカーから同様の製品が発売されていることを知り，その中でよさそうなApolloo7を選択しました．
なぜApollo7を選択したか とりあえず2ちゃんねるの該当スレで評判を見ていきました． ざっと眺めたところ，スレ内ではEARIN，Apollo7，The Dashがよく話題に挙がる機種のようでした． 各機種の特徴と評判は以下の通り．
EARIN BA型ドライバを搭載 人の多いところで接続が切れやすいという発言をよく見かけた そもそもかつて見送った機種 The Dash ストレージ内蔵，フィットネストラッカー搭載，トランスペアレントモード搭載と，他の機種と比べて多機能 個人的には前半2つの機能はこの手の機種に求めない 本体とケースが大きい Apollo7 人が多いところでも接続が切れにくいという発言をよく見かけた 自分が求めている必要最小限の機能 デザインがよい 9/30に国内代理店が取扱いを開始するので保証などを受けやすい 以上の点から検討した結果，Apollo7を選択しました． 国内だとeイヤホンで試聴できるですが，所詮Bluetoothだし音質はそれほど重視していなかったので試聴せずにヨドバシドットコムにて購入．
使い勝手 各イヤホンは本体にボタンを搭載しており，このボタンを押すことで本体またはスマホを操作します． 各イヤホンにはLまたはRと印字されており，左右どちら用かはあらかじめ決まっているようです．
初期セットアップ 左右どちらかのイヤホン(以降，右耳とする)のボタンを長押しする 「Power on」と声が流れるが引き続き長押しし続ける 「Pairing」と声が流れるのでスマホを操作しペアリングする 「Phone connected」と声が流れる(このイヤホンがスマホと接続される) 左耳のイヤホンのボタンを長押しする 「Headset connected」と両耳から流れる(このイヤホンは右耳のイヤホンと接続される) 再度使うとき イヤホンをケースから取り出す 右耳のイヤホンのボタンを長押しする(「Power on」と流れる) しばらくするとスマホと接続される(「Phone connected」と流れる) 左耳のイヤホンのボタンを長押しする(「Power on」と流れる) しばらくすると右耳と接続される(「Headset connected」と両耳から流れる) レビュー いずれもNexus5で使用していて気付いた点です．ペアリングする機種によって接続の切れにくさなどは異なる可能性があります．
いい点 やっぱり完全ワイヤレスは便利
鞄の中でケーブルがからまることがない，使用中にケーブルがひっかかることがない．かなり便利です． フィット感がいい
これを付けてジョギングもしてみましたが外れる気配は一切ありませんでした．重量もほとんど感じず． デザインがいい
シンプルなデザインで必要最小限の機能とサイズで気に入りました． 見た目よりケースに収納しやすい
イヤホンもケースも小さいのでケースに収納するのが大変そうだなーと思っていたのですが，雑に扱ってもしっかりケースにはまってくれるので収納は楽です． 気になる点 ケースのバッテリー残量がわかりにくい
ケースのバッテリー残量が少なくなるとケースのLEDが点滅するのですが，そうなったら時すでに遅しなのか，イヤホンの充電がほとんどされずにイヤホンが使えなくて困ったことがありました． 毎日ケースも充電するようにした方がよさそうです． 人の多いところではやっぱり切れる
駅など人の多いところではやっぱり音がブツブツ切れます． スマホとの接続よりも左右のリンクが切れやすいと感じます． ペアリングされていると本体のLEDが点滅する</description>
    </item>
    
    <item>
      <title>XtraBackupによるバックアップ設計</title>
      <link>https://blog.uyorum.net/post/xtrabackup-1/</link>
      <pubDate>Mon, 12 Sep 2016 19:19:36 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/xtrabackup-1/</guid>
      <description>&lt;p&gt;最近，自宅で動かしているとあるサービスのMariaDBのバックアップを取ろうとふと思い立った．
使ったことがなかったのでXtraBackupでバックアップ設計することにした．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CROSS2016 まとめ</title>
      <link>https://blog.uyorum.net/post/cross2016/</link>
      <pubDate>Sat, 06 Feb 2016 20:44:03 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/cross2016/</guid>
      <description>&lt;p&gt;メモ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hyper-V上の仮想マシンのIPアドレスをホスト側で取得する</title>
      <link>https://blog.uyorum.net/post/get-ip-in-hyperv/</link>
      <pubDate>Mon, 09 Nov 2015 23:28:41 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/get-ip-in-hyperv/</guid>
      <description>&lt;p&gt;「内部ネットワーク」を使用している場合，Hyper-VのGuestOSはDHCPでIPアドレスが振られる．
HostからGuestへアクセスするときにアドレスが変わると困る．
Guestを固定アドレスにすればいいのかも知れないが，何かの拍子でセグメントが変わったら面倒なので自動で取得できるようする．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ffmpeg(avconv)でmp3からブランクスクリーン(黒)のmp4を作成する</title>
      <link>https://blog.uyorum.net/post/create-blank-video-with-ffmpeg/</link>
      <pubDate>Thu, 15 Oct 2015 21:15:02 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/create-blank-video-with-ffmpeg/</guid>
      <description>&lt;p&gt;逆(mp4からmp3を抽出する)はよく見つかるけど日本語の情報がなかったのでまとめておく．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CoreOS入門1 etcd</title>
      <link>https://blog.uyorum.net/post/learning-coreos-01/</link>
      <pubDate>Fri, 04 Sep 2015 23:01:54 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/learning-coreos-01/</guid>
      <description>&lt;p&gt;最近CoreOSを触りはじめたので学んだことをまとめていく．まずはetcdから．
最終的にはKubernetesでCoreOSをコントロールするところまでいきたいなーと思ってるが，いつになることやら．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>YAPC::Asia Tokyo 2015に行ってきた</title>
      <link>https://blog.uyorum.net/post/yapc2015/</link>
      <pubDate>Sun, 23 Aug 2015 21:12:10 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/yapc2015/</guid>
      <description>&lt;p&gt;YAPC::Asia Tokyo 2015に行ってきたのでまとめ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go言語のお勉強 その4</title>
      <link>https://blog.uyorum.net/post/learning-go-04/</link>
      <pubDate>Sun, 02 Aug 2015 22:17:45 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/learning-go-04/</guid>
      <description>&lt;p&gt;4日目&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go言語のお勉強 その3</title>
      <link>https://blog.uyorum.net/post/learning-go-03/</link>
      <pubDate>Sun, 02 Aug 2015 01:19:12 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/learning-go-03/</guid>
      <description>&lt;p&gt;今日の分．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go言語のお勉強 その2</title>
      <link>https://blog.uyorum.net/post/learning-go-02/</link>
      <pubDate>Wed, 29 Jul 2015 23:07:42 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/learning-go-02/</guid>
      <description>&lt;p&gt;今日のまとめ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go言語のお勉強 その1</title>
      <link>https://blog.uyorum.net/post/learning-go-01/</link>
      <pubDate>Wed, 29 Jul 2015 00:30:49 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/learning-go-01/</guid>
      <description>&lt;p&gt;Go言語を勉強中．今日やったことまとめ．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ワンタイムパスワード生成アルゴリズムについて学ぶ1 - HOTP</title>
      <link>https://blog.uyorum.net/post/hotp/</link>
      <pubDate>Fri, 24 Jul 2015 22:57:11 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/hotp/</guid>
      <description>&lt;p&gt;今後，OTPを扱うことになりそうなので予習しておく．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MacのxhyveでDockerを使う</title>
      <link>https://blog.uyorum.net/post/boot2docker-xhyve/</link>
      <pubDate>Tue, 21 Jul 2015 23:52:37 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/boot2docker-xhyve/</guid>
      <description>&lt;p&gt;xhyve(いまだに発音がわからない)の仕組みは全く理解してないけど，xhyveとboot2dockerを使ってdockerコマンドを叩くまで．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近のBerkshelfの使い方(2015)</title>
      <link>https://blog.uyorum.net/post/how-to-berkshelf/</link>
      <pubDate>Thu, 16 Jul 2015 21:50:16 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/how-to-berkshelf/</guid>
      <description>&lt;p&gt;今さらながらBerkshelfを使ったのだけれどネットには最新の情報がなくて習得に手こずったのでまとめておく。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DD-WRTでOpenVPNの設定</title>
      <link>https://blog.uyorum.net/post/openvpn-on-dd-wrt/</link>
      <pubDate>Sun, 29 Mar 2015 20:56:18 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/openvpn-on-dd-wrt/</guid>
      <description>&lt;p&gt;色々はまったのでメモ。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Octopressセットアップメモ</title>
      <link>https://blog.uyorum.net/post/setup-octopress/</link>
      <pubDate>Sun, 22 Feb 2015 22:16:12 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/setup-octopress/</guid>
      <description>&lt;p&gt;わけあってOctopress環境を作り直したのでメモ&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Xmonadのmodキーを半角/全角キーに変更する</title>
      <link>https://blog.uyorum.net/post/xmonad-change-modmask/</link>
      <pubDate>Sun, 22 Feb 2015 19:04:51 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/xmonad-change-modmask/</guid>
      <description>&lt;p&gt;Xmonadを使い始めました．
いろいろ設定方法を紹介しているページは見つかるのですがmodキーをAltまたはWindowsキー以外に設定する方法が見つからなかったのでメモ．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Octopressでmarkdownのファイル名規則を変更する</title>
      <link>https://blog.uyorum.net/post/custom-octopress/</link>
      <pubDate>Tue, 22 Apr 2014 23:10:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/custom-octopress/</guid>
      <description>&lt;p&gt;少しいじりました．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RaspeberryPi用のGoogle製Web開発プラットフォームCoder for RaspberryPiを導入してみた</title>
      <link>https://blog.uyorum.net/post/coder-for-pi/</link>
      <pubDate>Sun, 06 Oct 2013 11:20:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/coder-for-pi/</guid>
      <description>&lt;p&gt;先日リリースされたCoder for RaspberryPiを導入してみたのでその手順をまとめておきます．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intel DC3217IYEへVMware vSphere hypervisor5.5をインストールする</title>
      <link>https://blog.uyorum.net/post/esxi-03/</link>
      <pubDate>Tue, 24 Sep 2013 22:01:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/esxi-03/</guid>
      <description>&lt;p&gt;先日購入したDC3217IYEにVMware vSphere hypervisorをインストールしようとしたところドライバがないと言われました．
IntelのNICだから認識するだろうとタカをくくっていましたがダメでした．方法を調べたので手順をまとめておきます．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IntelのNUCベアボーン DC3217IYE を買いました</title>
      <link>https://blog.uyorum.net/post/esxi-02/</link>
      <pubDate>Mon, 23 Sep 2013 22:58:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/esxi-02/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://uyorum.github.io/blog/2013/09/23/esxi-01/&#34;&gt;前回&lt;/a&gt;の続きです．
ESXiをインストールするために購入したIntelのNUCベアボーン DC3217IYE が届いたので軽くレビューしておきます．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESXiサーバ構築誌 - 機器構成</title>
      <link>https://blog.uyorum.net/post/esxi-01/</link>
      <pubDate>Mon, 23 Sep 2013 22:28:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/esxi-01/</guid>
      <description>&lt;p&gt;かねてから自宅サーバ兼，検証用マシン用にESXiサーバが自宅にほしいと思っていました．
しかし，なかなかハードウェアが決まらず二の足を踏んでいたのですが，たまたまネットを眺めていたらなかなかよい構成を
思いついたので構築に踏みきることにしました．
その経過を何回かにわけて記録に残しておくことにします．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RPMコマンドのオプション</title>
      <link>https://blog.uyorum.net/post/about-rpm/</link>
      <pubDate>Sat, 21 Sep 2013 21:59:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/about-rpm/</guid>
      <description>&lt;p&gt;最近LPIC-1を取ろうと勉強中です．
その中でRedHat系のパッケージ操作コマンドであるrpmコマンドのオプションについて出てきたので備忘録のためにまとめておくことにします．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>org-googlecl.elの導入と改造</title>
      <link>https://blog.uyorum.net/post/install-org-googlecl/</link>
      <pubDate>Sat, 21 Sep 2013 09:55:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/install-org-googlecl/</guid>
      <description>&lt;p&gt;EmacsからBloggerに直接投稿できる上にorg-modeの文法が利用できるorg-googlecl.elをむかし導入しました．
さっそく試してみたところ文章がやたらと改行されていたのでそれを直すためにorg-googlecl.elを改造しました．
そのログが残っていたのでとりあえずあげておきます．
見てのとおり現在は見ての通りgithub + Octopressを使用しているのですが．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android上でDebianを動かす</title>
      <link>https://blog.uyorum.net/post/debian-on-android/</link>
      <pubDate>Fri, 20 Sep 2013 22:44:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/debian-on-android/</guid>
      <description>&lt;p&gt;AndroidでもEmacsと戯れたかったので調べてみました．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>はじめまして</title>
      <link>https://blog.uyorum.net/post/first-post/</link>
      <pubDate>Fri, 20 Sep 2013 22:42:00 +0900</pubDate>
      
      <guid>https://blog.uyorum.net/post/first-post/</guid>
      <description>ブログを始めました． 日々の作業や調べたことをログを兼ねてアップしていこうと思います．
これからよろしくお願いします．</description>
    </item>
    
  </channel>
</rss>
