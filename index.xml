<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@uyorumの雑記帳</title>
    <link>http://uyorum.github.io/</link>
    <description>Recent content on @uyorumの雑記帳</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>uyorum All Right Reserved.</copyright>
    <lastBuildDate>Sat, 10 Jun 2017 20:20:04 +0900</lastBuildDate>
    
	<atom:link href="http://uyorum.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Home AssistantとAmazon Dash Buttonを連携させる</title>
      <link>http://uyorum.github.io/blog/2017/06/10/home-assistant-with-dash-button/</link>
      <pubDate>Sat, 10 Jun 2017 20:20:04 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2017/06/10/home-assistant-with-dash-button/</guid>
      <description>Amazon Dash Button間違った使い方ができることで有名だが，Amazon Dash ButtonからHome Assistantでアクションをキックできるようにしてみる．
Amazon Dash Buttonのハック ネットに情報は溢れているため詳しい説明は省略する．
本来のAmazon Dash Buttonはボタンを押すことであらかじめ設定した商品を注文するためのものだが，その過程で発生するパケットをトリガーに利用して， ボタンを押すことで任意の処理を実行させようというもの．
仕組みの概要 Amazon Dash Buttonと連携するComponentは過去に提案されている．
Amazon Dash Component? · Issue #484 · home-assistant/home-assistant
主に以下の理由により却下されている
 Dash ButtonのためだけにHome Assistantをrootで動かすのは受け入れられない Dash Buttonの代わりにAWS IoTボタンやESP8266を使えば同じようなことが実現できる  このIssueの中ではmaddox/dasherを使うよう提案されているが，いくつかの個人的な理由によりツールを自作した．
 検知対象に利用しているARP probeパケットが自分の環境ではほとんどキャプチャできなかった Home Assistant用として使うには設定ファイルが複雑すぎる Node.jsがよくわからない  作成したコードはGithubで公開している．
 ARP probeの代わりにDHCP Discoverパケットをキャプチャする 設定ファイルに書く内容は，Home Assistantと組み合わせて使用するための最低限の項目に絞っている Python製  仕組みは以下の通り
 dash-haサーバでボタン押下を検知 ボタンのMACアドレスに応じて，Home AssistantへREST APIでイベントを発火させる Home AssistantのAutomationでそのイベントをトリガーにアクションが実行されるようにしておく ボタンを押すとそのAutomationが実行される  ボタン押下を検知するサーバの用意 ボタン検知を検知するためのサーバを用意し，専用のプログラムを走らせておく．自分はHome Assistantが稼動しているRaspbery Pi 2 Model Bで動かしている． 以下のような感じでインストールする．</description>
    </item>
    
    <item>
      <title>Home Assistantで人感センサーを使って照明を自動点灯する</title>
      <link>http://uyorum.github.io/blog/2017/04/23/home-assistant-gpio/</link>
      <pubDate>Sun, 23 Apr 2017 21:33:54 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2017/04/23/home-assistant-gpio/</guid>
      <description>Home Assistantで人感センサーを使って自宅の廊下の電球を点灯/消灯するシステムを組んでみる．
使用製品 今回使用するセンサー，機器は以下の通り
 Raspbery Pi 2 Model B
Raspbian jessie liteの上にHome Assistantをインストール済み
 赤外線人感センサー SB612A
秋月電子で購入．Raspberry Piから電源を取るので3.3Vまたは5Vで動くものなら何でもいいと思う．
 WiFi LED電球 MiLight 楽天のイルミカでブリッジと電球を購入．
スマホアプリを使って操作できるところまでセットアップしておく．資金に余裕があるならHueでもいいと思う．
  概要 やりたいことは以下の通り
 人感センサーを使って人が近づいたことを検知できるようにしておく センサーに反応があった場合，MiLightへリクエストを発行し電球を点灯 センサーに反応がなくなってしばらく経ってからMiLightへリクエストを発行し電球を消灯  Home AssistantでGPIOを使う 秋月のサイトにあるSB612Aのデータシートを見ると以下のことがわかる．
 VCC端子に電源を接続する(DC3.3〜12V) センサーの反応はTEST端子から取れる．TEST端子の電位がそれぞれ反応あり=3.3V，反応なし=0Vになる．ただし実際には，センサーに反応がなくなってから0Vになるまではタイムラグがある 上記タイムラグ(Delay Time)は2秒〜80分で調整できる  今回の設計は以下のようにする
 VCC端子を3.3V端子(ピン1)へ接続 TEST端子をGPIO 4端子へ接続 GND端子をGND(ピン6)へ接続 Delay timeは最短の2秒とする TEST=0Vの状態を確実にGPIOのLOW状態とするためにRaspberryPiに内蔵のプルダウン抵抗を有効にする bouncetimeは50msとする  Home Assistantの設定は以下のようになる．
 configration.yaml  binary_sensor: - platform: rpi_gpio ports: 4: PIR Sensor pull_mode: down bouncetime: 50 invert_logic: false  なおGPIO端子の操作にはOS上で相応の権限が必要となる．今回使用しているRaspbian Jessieの場合はHome Assistantの実行ユーザをgpioグループに所属させればよい．</description>
    </item>
    
    <item>
      <title>Home Assistantでつくるホームオートメーション(導入編)</title>
      <link>http://uyorum.github.io/blog/2017/04/22/home-assistant-install/</link>
      <pubDate>Sat, 22 Apr 2017 21:48:00 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2017/04/22/home-assistant-install/</guid>
      <description>ホームオートメーション/スマートホーム化を実現できるOSSのHome Asssitantについて
Home Assitantとは  Home Assistant home-assistant/home-assistant: Open-source home automation platform running on Python 3  ホームオートメーションを実現するためのソフトウェア．Githubで開発されており，Python3で書かれている． 様々なサービス，センサー，家電に対応しておりブラウザでそれらの状態を確認，操作するためのUIが提供されている． また，特定のトリガーとアクションをあらかじめ定義しておくことでそれらを自動制御することもできる．
同様のソフトウェアとして，以下のようなソフトウェアもある
 openHAB Domoticz HomeBridge  2017/4/22時点でGithubのスター数は以下のような感じでHome Assistantが一番人気がありそう．
 Home Assistant…6583 openHAB…241 Domoticz…651 HomeBridge…4903  公式サイトでデモ画面を見ることができる．Home Assistant Demo
インストール Installation of Home Assistant - Home Assistant
様々のインストール方法が提供されている．自分はRaspberryPiでGPIOを使いたかったためRaspbianへのManual Installを選択した．
systemdのユニットファイルも提供されている．自分は多少変更して以下のようにした．
 /etc/systemd/system/home-assistant.service  [Unit] Description=Home Assistant After=network.target [Service] Type=simple User=ha ExecStart=/srv/homeassistant/bin/hass -c &amp;quot;/home/ha/.homeassistant&amp;quot; [Install] WantedBy=multi-user.target  「ha」という名前でシステムユーザを作成し，このユーザでHome Assistantを実行するようにしている．
参考: Autostart using systemd - Home Assistant</description>
    </item>
    
    <item>
      <title>Ruby on RailsのAsset Pipelineとインクルードとプリコンパイルの動作</title>
      <link>http://uyorum.github.io/blog/2017/03/01/rails-asset-pipeline-1/</link>
      <pubDate>Wed, 01 Mar 2017 23:01:28 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2017/03/01/rails-asset-pipeline-1/</guid>
      <description>Ruby on RailsのAsset Pipelineについて取り組む機会があったが，動きをよくわかっていなかったため解決までに非常に多くの時間をかけてしまった． いろいろと知識を詰め込んだので復習も兼ねてまとめていく． おそらくRailsを使い慣れている人にとっては基本的すぎる内容．
環境 $ ruby -v geruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin15] $ gem list -l ^rails$ *** LOCAL GEMS *** rails (4.2.8)  アセットとは 定義が見つからなかったが，おそらく以下のような感じ．
Railsのサーバから配信するコンテンツのうち，Viewにより生成されたもの以外  具体的にはJavaScript，CSS，画像ファイルなど．あまりないだろうが，静的なhtmlもこれらと同様に扱うことはできそう．
アセットパイプラインとは サーバ上に存在するアセットをクライアントへ配信する仕組みのこと．アセットパイプラインはsprockets-railsgemにより提供されている．配信までの途中でいくつかの処理を経る場合がほとんど．例えば以下．
 JavaScriptおよびCSSの結合，最小化 ブラウザが理解しない書式(CoffeeScript, SASS, ERBなど)で書かれたコードを素のコードへ変換する ファイル名へMD5ダイジェストの付与 アセットの圧縮  それぞれの処理の内容はアセットパイプライン | Rails ガイドが詳しいので省略する
いくつかの処理はRailsが動作するモード(Environment)により異なる．
通常，アセットは{app,lib,vendor}/assets/{javascripts,stylesheets,images}のいずれかに配置する． それぞれの使い分けは下記を参照
2.2 アセットの編成 - アセットパイプライン | Rails ガイド
以下，簡単のためconfig.assets.digest = falseを設定する(ファイル名にダイジェストが含まれなくなる)
インクルード 通常，クライアントへ配信されるのはapp/assets/javascripts/application.jsとapp/assets/stylesheets/application.cssである． 実際，デフォルトの内容を削除してみると，レスポンスに含まれるstylesheetとscriptはapplication.cssおよびapplication.jsのみである．
$ cat /dev/null &amp;gt; app/assets/javascripts/application.js $ cat /dev/null &amp;gt; app/assets/stylesheets/application.</description>
    </item>
    
    <item>
      <title>Erato Audio Apollo7 レビュー</title>
      <link>http://uyorum.github.io/blog/2016/10/09/apollo7-1/</link>
      <pubDate>Sun, 09 Oct 2016 17:39:14 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2016/10/09/apollo7-1/</guid>
      <description>Erato Audio社の完全ワイヤレスイヤホンApollo7を買って1週間ほど使ったので使用感とかレビューを書いておきます．
なぜ今買ったか 完全ワイヤレスイヤホンという分野を知ったのは2014年にKickstarterでEARINが発表されたときでした． そのときは非常に気になっていたのですが，スペック的にいくつか気になるところもあり，まだ新しい分野でもあったので買うのはもう少し製品が成熟してからにしようと思って手を出しませんでした． 以降はこの分野については特にウォッチはせずに忘れていたのですが，最近AppleからAirPodsが発表されたのを見て思い出して再度調べてみたのがきっかけでした． いくつかのメーカーから同様の製品が発売されていることを知り，その中でよさそうなApolloo7を選択しました．
なぜApollo7を選択したか とりあえず2ちゃんねるの該当スレで評判を見ていきました． ざっと眺めたところ，スレ内ではEARIN，Apollo7，The Dashがよく話題に挙がる機種のようでした． 各機種の特徴と評判は以下の通り．
EARIN  BA型ドライバを搭載 人の多いところで接続が切れやすいという発言をよく見かけた そもそもかつて見送った機種  The Dash  ストレージ内蔵，フィットネストラッカー搭載，トランスペアレントモード搭載と，他の機種と比べて多機能  個人的には前半2つの機能はこの手の機種に求めない  本体とケースが大きい  Apollo7  人が多いところでも接続が切れにくいという発言をよく見かけた 自分が求めている必要最小限の機能 デザインがよい 9/30に国内代理店が取扱いを開始するので保証などを受けやすい  以上の点から検討した結果，Apollo7を選択しました． 国内だとeイヤホンで試聴できるですが，所詮Bluetoothだし音質はそれほど重視していなかったので試聴せずにヨドバシドットコムにて購入．
使い勝手 各イヤホンは本体にボタンを搭載しており，このボタンを押すことで本体またはスマホを操作します． 各イヤホンにはLまたはRと印字されており，左右どちら用かはあらかじめ決まっているようです．
初期セットアップ  左右どちらかのイヤホン(以降，右耳とする)のボタンを長押しする 「Power on」と声が流れるが引き続き長押しし続ける 「Pairing」と声が流れるのでスマホを操作しペアリングする 「Phone connected」と声が流れる(このイヤホンがスマホと接続される) 左耳のイヤホンのボタンを長押しする 「Headset connected」と両耳から流れる(このイヤホンは右耳のイヤホンと接続される)  再度使うとき  イヤホンをケースから取り出す 右耳のイヤホンのボタンを長押しする(「Power on」と流れる) しばらくするとスマホと接続される(「Phone connected」と流れる) 左耳のイヤホンのボタンを長押しする(「Power on」と流れる) しばらくすると右耳と接続される(「Headset connected」と両耳から流れる)  レビュー いずれもNexus5で使用していて気付いた点です．ペアリングする機種によって接続の切れにくさなどは異なる可能性があります．
いい点  やっぱり完全ワイヤレスは便利
鞄の中でケーブルがからまることがない，使用中にケーブルがひっかかることがない．かなり便利です． フィット感がいい</description>
    </item>
    
    <item>
      <title>XtraBackupによるバックアップ設計</title>
      <link>http://uyorum.github.io/blog/2016/09/12/xtrabackup-1/</link>
      <pubDate>Mon, 12 Sep 2016 19:19:36 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2016/09/12/xtrabackup-1/</guid>
      <description>&lt;p&gt;最近，自宅で動かしているとあるサービスのMariaDBのバックアップを取ろうとふと思い立った．
使ったことがなかったのでXtraBackupでバックアップ設計することにした．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CROSS2016 まとめ</title>
      <link>http://uyorum.github.io/blog/2016/02/06/cross2016/</link>
      <pubDate>Sat, 06 Feb 2016 20:44:03 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2016/02/06/cross2016/</guid>
      <description>&lt;p&gt;メモ&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hyper-V上の仮想マシンのIPアドレスをホスト側で取得する</title>
      <link>http://uyorum.github.io/blog/2015/11/09/get-ip-in-hyperv/</link>
      <pubDate>Mon, 09 Nov 2015 23:28:41 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/11/09/get-ip-in-hyperv/</guid>
      <description>&lt;p&gt;「内部ネットワーク」を使用している場合，Hyper-VのGuestOSはDHCPでIPアドレスが振られる．
HostからGuestへアクセスするときにアドレスが変わると困る．
Guestを固定アドレスにすればいいのかも知れないが，何かの拍子でセグメントが変わったら面倒なので自動で取得できるようする．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ffmpeg(avconv)でmp3からブランクスクリーン(黒)のmp4を作成する</title>
      <link>http://uyorum.github.io/blog/2015/10/15/create-blank-video-with-ffmpeg/</link>
      <pubDate>Thu, 15 Oct 2015 21:15:02 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/10/15/create-blank-video-with-ffmpeg/</guid>
      <description>&lt;p&gt;逆(mp4からmp3を抽出する)はよく見つかるけど日本語の情報がなかったのでまとめておく．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CoreOS入門1 etcd</title>
      <link>http://uyorum.github.io/blog/2015/09/04/learning-coreos-01/</link>
      <pubDate>Fri, 04 Sep 2015 23:01:54 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/09/04/learning-coreos-01/</guid>
      <description>&lt;p&gt;最近CoreOSを触りはじめたので学んだことをまとめていく．まずはetcdから．
最終的にはKubernetesでCoreOSをコントロールするところまでいきたいなーと思ってるが，いつになることやら．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>YAPC::Asia Tokyo 2015に行ってきた</title>
      <link>http://uyorum.github.io/blog/2015/08/23/yapc2015/</link>
      <pubDate>Sun, 23 Aug 2015 21:12:10 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/08/23/yapc2015/</guid>
      <description>&lt;p&gt;YAPC::Asia Tokyo 2015に行ってきたのでまとめ&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go言語のお勉強 その4</title>
      <link>http://uyorum.github.io/blog/2015/08/02/learning-go-04/</link>
      <pubDate>Sun, 02 Aug 2015 22:17:45 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/08/02/learning-go-04/</guid>
      <description>&lt;p&gt;4日目&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go言語のお勉強 その3</title>
      <link>http://uyorum.github.io/blog/2015/08/02/learning-go-03/</link>
      <pubDate>Sun, 02 Aug 2015 01:19:12 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/08/02/learning-go-03/</guid>
      <description>&lt;p&gt;今日の分．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go言語のお勉強 その2</title>
      <link>http://uyorum.github.io/blog/2015/07/29/learning-go-02/</link>
      <pubDate>Wed, 29 Jul 2015 23:07:42 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/07/29/learning-go-02/</guid>
      <description>&lt;p&gt;今日のまとめ&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go言語のお勉強 その1</title>
      <link>http://uyorum.github.io/blog/2015/07/29/learning-go-01/</link>
      <pubDate>Wed, 29 Jul 2015 00:30:49 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/07/29/learning-go-01/</guid>
      <description>&lt;p&gt;Go言語を勉強中．今日やったことまとめ．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ワンタイムパスワード生成アルゴリズムについて学ぶ1 - HOTP</title>
      <link>http://uyorum.github.io/blog/2015/07/24/hotp/</link>
      <pubDate>Fri, 24 Jul 2015 22:57:11 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/07/24/hotp/</guid>
      <description>&lt;p&gt;今後，OTPを扱うことになりそうなので予習しておく．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MacのxhyveでDockerを使う</title>
      <link>http://uyorum.github.io/blog/2015/07/21/boot2docker-xhyve/</link>
      <pubDate>Tue, 21 Jul 2015 23:52:37 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/07/21/boot2docker-xhyve/</guid>
      <description>&lt;p&gt;xhyve(いまだに発音がわからない)の仕組みは全く理解してないけど，xhyveとboot2dockerを使ってdockerコマンドを叩くまで．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最近のBerkshelfの使い方(2015)</title>
      <link>http://uyorum.github.io/blog/2015/07/16/how-to-berkshelf/</link>
      <pubDate>Thu, 16 Jul 2015 21:50:16 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/07/16/how-to-berkshelf/</guid>
      <description>&lt;p&gt;今さらながらBerkshelfを使ったのだけれどネットには最新の情報がなくて習得に手こずったのでまとめておく。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DD-WRTでOpenVPNの設定</title>
      <link>http://uyorum.github.io/blog/2015/03/29/openvpn-on-dd-wrt/</link>
      <pubDate>Sun, 29 Mar 2015 20:56:18 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/03/29/openvpn-on-dd-wrt/</guid>
      <description>&lt;p&gt;色々はまったのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Octopressセットアップメモ</title>
      <link>http://uyorum.github.io/blog/2015/02/22/setup-octopress/</link>
      <pubDate>Sun, 22 Feb 2015 22:16:12 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/02/22/setup-octopress/</guid>
      <description>&lt;p&gt;わけあってOctopress環境を作り直したのでメモ&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Xmonadのmodキーを半角/全角キーに変更する</title>
      <link>http://uyorum.github.io/blog/2015/02/22/xmonad-change-modmask/</link>
      <pubDate>Sun, 22 Feb 2015 19:04:51 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2015/02/22/xmonad-change-modmask/</guid>
      <description>&lt;p&gt;Xmonadを使い始めました．
いろいろ設定方法を紹介しているページは見つかるのですがmodキーをAltまたはWindowsキー以外に設定する方法が見つからなかったのでメモ．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Octopressでmarkdownのファイル名規則を変更する</title>
      <link>http://uyorum.github.io/blog/2014/04/22/custom-octopress/</link>
      <pubDate>Tue, 22 Apr 2014 23:10:00 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2014/04/22/custom-octopress/</guid>
      <description>&lt;p&gt;少しいじりました．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RaspeberryPi用のGoogle製Web開発プラットフォームCoder for RaspberryPiを導入してみた</title>
      <link>http://uyorum.github.io/blog/2013/10/06/coder-for-pi/</link>
      <pubDate>Sun, 06 Oct 2013 11:20:00 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2013/10/06/coder-for-pi/</guid>
      <description>&lt;p&gt;先日リリースされたCoder for RaspberryPiを導入してみたのでその手順をまとめておきます．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Intel DC3217IYEへVMware vSphere hypervisor5.5をインストールする</title>
      <link>http://uyorum.github.io/blog/2013/09/24/esxi-03/</link>
      <pubDate>Tue, 24 Sep 2013 22:01:00 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2013/09/24/esxi-03/</guid>
      <description>&lt;p&gt;先日購入したDC3217IYEにVMware vSphere hypervisorをインストールしようとしたところドライバがないと言われました．
IntelのNICだから認識するだろうとタカをくくっていましたがダメでした．方法を調べたので手順をまとめておきます．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IntelのNUCベアボーン DC3217IYE を買いました</title>
      <link>http://uyorum.github.io/blog/2013/09/23/esxi-02/</link>
      <pubDate>Mon, 23 Sep 2013 22:58:00 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2013/09/23/esxi-02/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://uyorum.github.io/blog/2013/09/23/esxi-01/&#34;&gt;前回&lt;/a&gt;の続きです．
ESXiをインストールするために購入したIntelのNUCベアボーン DC3217IYE が届いたので軽くレビューしておきます．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ESXiサーバ構築誌 - 機器構成</title>
      <link>http://uyorum.github.io/blog/2013/09/23/esxi-01/</link>
      <pubDate>Mon, 23 Sep 2013 22:28:00 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2013/09/23/esxi-01/</guid>
      <description>&lt;p&gt;かねてから自宅サーバ兼，検証用マシン用にESXiサーバが自宅にほしいと思っていました．
しかし，なかなかハードウェアが決まらず二の足を踏んでいたのですが，たまたまネットを眺めていたらなかなかよい構成を
思いついたので構築に踏みきることにしました．
その経過を何回かにわけて記録に残しておくことにします．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>RPMコマンドのオプション</title>
      <link>http://uyorum.github.io/blog/2013/09/21/about-rpm/</link>
      <pubDate>Sat, 21 Sep 2013 21:59:00 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2013/09/21/about-rpm/</guid>
      <description>&lt;p&gt;最近LPIC-1を取ろうと勉強中です．
その中でRedHat系のパッケージ操作コマンドであるrpmコマンドのオプションについて出てきたので備忘録のためにまとめておくことにします．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>org-googlecl.elの導入と改造</title>
      <link>http://uyorum.github.io/blog/2013/09/21/install-org-googlecl/</link>
      <pubDate>Sat, 21 Sep 2013 09:55:00 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2013/09/21/install-org-googlecl/</guid>
      <description>&lt;p&gt;EmacsからBloggerに直接投稿できる上にorg-modeの文法が利用できるorg-googlecl.elをむかし導入しました．
さっそく試してみたところ文章がやたらと改行されていたのでそれを直すためにorg-googlecl.elを改造しました．
そのログが残っていたのでとりあえずあげておきます．
見てのとおり現在は見ての通りgithub + Octopressを使用しているのですが．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android上でDebianを動かす</title>
      <link>http://uyorum.github.io/blog/2013/09/20/debian-on-android/</link>
      <pubDate>Fri, 20 Sep 2013 22:44:00 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2013/09/20/debian-on-android/</guid>
      <description>&lt;p&gt;AndroidでもEmacsと戯れたかったので調べてみました．&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>はじめまして</title>
      <link>http://uyorum.github.io/blog/2013/09/20/first-post/</link>
      <pubDate>Fri, 20 Sep 2013 22:42:00 +0900</pubDate>
      
      <guid>http://uyorum.github.io/blog/2013/09/20/first-post/</guid>
      <description>ブログを始めました． 日々の作業や調べたことをログを兼ねてアップしていこうと思います．
これからよろしくお願いします．</description>
    </item>
    
  </channel>
</rss>